name: $(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - src/*

pr:
  paths:
    include:
      - src/*
      - build/ci-build.yml

parameters:
  - name: 'Package.Version.ManualTrigger'
    type: string
    default: 'preview'

resources:
  repositories:
    - repository: templates
      type: github
      name: arcus-azure/azure-devops-templates
      endpoint: arcus-azure

variables:
  - group: 'Arcus Web API - Integration Testing'
  - group: 'Arcus Security - Integration Testing'
  - group: 'Arcus - GitHub Package Registry'
  - group: 'Build Configuration'
  - template: ./variables/build.yml
  - template: ./variables/test.yml

stages:
  - stage: Build
    jobs:
      - job: Compile
        pool:
          vmImage: '$(Vm.Image)'
        steps:
          - task: UseDotNet@2
            displayName: 'Import .NET Core SDK ($(DotNet.Sdk.VersionBC))'
            inputs:
              packageType: 'sdk'
              version: '$(DotNet.Sdk.VersionBC)'
          - template: 'nuget/determine-pr-version.yml@templates'
            parameters:
              manualTriggerVersion: ${{ parameters['Package.Version.ManualTrigger'] }}
          - template: 'build/build-solution.yml@templates'
            parameters:
              dotnetSdkVersion: '$(DotNet.Sdk.Version)'
              includePreviewVersions: $(DotNet.Sdk.IncludePreviewVersions)
              versionSuffix: '$(packageVersion)'
          - task: CopyFiles@2
            displayName: 'Copy build artifacts'
            inputs:
              contents: '**/?(bin|obj)/**'
              targetFolder: '$(Pipeline.Workspace)/build'
          - task: PublishPipelineArtifact@0
            displayName: 'Publish build artifacts'
            inputs:
              targetPath: '$(Pipeline.Workspace)/build'
              artifactName: 'Build'

  - stage: UnitTests
    displayName: Unit Tests
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: UnitTests
        displayName: 'Run unit tests'
        pool:
          vmImage: '$(Vm.Image)'
        steps:
          - task: UseDotNet@2
            displayName: 'Import .NET Core SDK ($(DotNet.Sdk.VersionBC))'
            inputs:
              packageType: 'sdk'
              version: '$(DotNet.Sdk.VersionBC)'
          - template: test/run-unit-tests.yml@templates
            parameters:
              dotnetSdkVersion: '$(DotNet.Sdk.Version)'
              includePreviewVersions: $(DotNet.Sdk.IncludePreviewVersions)
              projectName: '$(Project).Tests.Unit'

  - stage: DockerIntegrationTests
    displayName: Integration Tests
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: DockerIntegrationTests
        displayName: 'Run Docker integration tests'
        pool:
          vmImage: '$(Vm.Image)'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - template: templates/run-docker-integration-tests.yml

  - stage: SelfContainedIntegrationTests
    displayName: Integration Tests
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: SelfContainedIntegrationTests
        displayName: 'Run self-contained integration tests'
        pool:
          vmImage: '$(Vm.Image)'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - template: test/run-integration-tests.yml@templates
            parameters:
              dotnetSdkVersion: '$(DotNet.Sdk.Version)'
              includePreviewVersions: $(DotNet.Sdk.IncludePreviewVersions)
              projectName: '$(Project).Tests.Integration'
              category: 'Integration'

  - stage: ReleaseToMyget
    displayName: 'Release to MyGet'
    dependsOn:
      - UnitTests
      - DockerIntegrationTests
      - SelfContainedIntegrationTests
    condition: succeeded()
    jobs:
      - job: PushToMyGet
        displayName: 'Push to MyGet'
        pool:
          vmImage: '$(Vm.Image)'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - template: nuget/publish-preview-package.yml@templates
